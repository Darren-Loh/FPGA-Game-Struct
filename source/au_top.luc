module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output io_sel[4],
    output io_seg[8],
    
    // Unused
    input io_button[5],
    input io_dip[3][8],
    output io_led[3][8],
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx           // USB->Serial output
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      play_counter play_counter;
      
      rng_sequence rng_sequence;
      whale whale;
      
      }
    regfile regfile;
  }
  play_notes play_notes;
  
  
  
  
  
  always {    
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    io_led = 3x{{8h0}};
    led = 8h00;             // turn LEDs off
    usb_tx = usb_rx;        // echo the serial data
    
    
    // TODO:
    io_sel = 4h0;
    io_seg = 8h0;
    
    
    //whale
    //whale.
    whale.counter_sel = play_counter.ctr_sel;
    
    //play counter
    play_counter.enable = whale.play_enable;
    
    //play_notes
    play_notes.enable = whale.play_enable;
    play_notes.ctr_sel = play_counter.ctr_sel[2:0];
    play_notes.ra = whale.ra;
    play_notes.rb = whale.rb;
    
    //rng_sequence
    rng_sequence.rand_sel = whale.rand_sel;
    
    //REGFILE
    REGFILE.we = whale.we;
    //REGFILE.write_data = whale.
    REGFILE.ra = whale.ra;
    REGFILE.rb = whale.rb;
    REGFILE.rc = whale.rc;
    
    
    
  }
}