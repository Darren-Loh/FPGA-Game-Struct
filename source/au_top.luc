module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output io_sel[4],
    output io_seg[8],
    
    input button[4],
    output buzz[2],
    output rgb_led[4],
    
    // Unused
    input io_button[5],
    input io_dip[3][8],
    output io_led[3][8],
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx           // USB->Serial output
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // Buttoon conditioners and edge detectors
    button_conditioner button_cond0;
    button_conditioner button_cond1;
    button_conditioner button_cond2;
    button_conditioner button_cond3;
    button_conditioner reset_button;
   
    edge_detector button_edge0 (#RISE(1), #FALL(0));
    edge_detector button_edge1 (#RISE(1), #FALL(0));
    edge_detector button_edge2 (#RISE(1), #FALL(0));
    edge_detector button_edge3 (#RISE(1), #FALL(0));
    edge_detector reset_edge (#RISE(1), #FALL(0));
    
    .rst(rst){
      play_counter play_counter;
      rng_sequence rng_sequence;
      whale whale;
      regfile regfile;
      multi_seven_seg multi_seg(#DIGITS(2));
    }

  }
  
  // idk why reset button is working
  // idk why starting state is wait for press
  
  alu16 alu;
  play_notes play_notes;
  decimal_counter decimal;
  
  always {
    reset_button.in = rst_n;
    reset_edge.in = reset_button.out;
    rst = reset_edge.out;
    
    // Set default start state
    io_seg = 8h00;
    io_sel = 4hf;
    io_led = 3x{{8h0}};
    led = 8h00;             // turn LEDs off
    usb_tx = usb_rx;        // echo the serial data

    // whale
    whale.counter_sel = play_counter.done;
    whale.rb_data = regfile.rbdata;
    
    button_cond0.in = button[0];
    button_cond1.in = button[1];
    button_cond2.in = button[2];
    button_cond3.in = button[3];
    
    button_edge0.in = button_cond0.out;
    button_edge1.in = button_cond1.out;
    button_edge2.in = button_cond2.out;
    button_edge3.in = button_cond3.out;
    
    whale.blue = button_edge0.out;
    whale.green = button_edge1.out;
    whale.red = button_edge2.out;
    whale.yellow = button_edge3.out;
    
    // play counter
    play_counter.enable = whale.play_enable;
    
    // play_notes
    play_notes.enable = whale.play_enable;
    play_notes.ctr_sel = play_counter.ctr_sel;
    play_notes.ra = regfile.radata;
    play_notes.rb = regfile.rbdata;
    buzz[0] = play_notes.buzz_low;
    buzz[1] = play_notes.buzz_high;
    rgb_led[3:0] = play_notes.led;
    
    if (whale.game_over) {
      rgb_led[0] = 1;
      rgb_led[1] = 1;
      rgb_led[2] = 1;
      rgb_led[3] = 1;
    }
    
    // Sequence for SEED = 32hDEADBEEF
    // 2, 0, 0, 0, 2, 3, 0, 0 LED
    // 1, 0, 1, 1, 1, 1, 0, 1 Buzz 
    // 1, 0, 3, 3, 1, 0, 0, 3 Final
    
    // io testing
    io_led[0][2:0] = regfile.testing_reg5[3:0];
    //io_led[0][7:4] = c{button_cond3.out, button_cond2.out, button_cond1.out, button_cond0.out};
    io_led[0][3] = play_counter.done;
    io_led[0][4] = button_cond0.out;
    io_led[0][5] = button_cond1.out;
    io_led[0][6] = button_cond2.out;
    io_led[0][7] = button_cond3.out;
    
    io_led[2:1] = $build(regfile.testing_reg2,2);
    //io_led[2][1:0] = c{play_notes.buzz_high, play_notes.buzz_low};
    
    
    // rng_sequence
    rng_sequence.rand_sel = whale.rand_sel;
    rng_sequence.next = whale.rand_next;
    
    // regfile
    regfile.ra = whale.ra;
    regfile.rb = whale.rb;
    regfile.rc = whale.rc;
    regfile.we = whale.we;
    
    // alu
    alu.alufn = whale.alufn;
    
    // 7 seg
    decimal.binary = regfile.player_score;
    multi_seg.values = decimal.decimal;
    io_sel[1:0] = multi_seg.sel;
    io_seg = multi_seg.seg;
    
    // Muxes for ALU
    case (whale.asel) {
      0: alu.a = regfile.radata;
      1: alu.a = 16h01;
      2: alu.a = 16h02;
      
      default:
        alu.a = 16h00;
    }
    
    case (whale.bsel) {
      0: alu.b = regfile.rbdata;
      1: alu.b = 16h01;
      2: alu.b = 16h02;
      3: alu.b = 16h03;
      
      default:
        alu.b = 16h00;
    }
    
    case (whale.wdsel) {
      2b00: regfile.wd_data = rng_sequence.out;
      2b01: regfile.wd_data = alu.out;
      2b10: regfile.wd_data = 16h00;
      
      default:
        regfile.wd_data = 16h00;
    }
      
  }
}