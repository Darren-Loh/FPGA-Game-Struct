/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module whale_5 (
    input clk,
    input rst,
    input [15:0] rb_data,
    input counter_sel,
    input blue,
    input green,
    input red,
    input yellow,
    output reg [5:0] alufn,
    output reg [1:0] asel,
    output reg [1:0] bsel,
    output reg we,
    output reg [3:0] ra,
    output reg [3:0] rb,
    output reg [3:0] rc,
    output reg [1:0] wdsel,
    output reg play_enable,
    output reg rand_next,
    output reg rand_sel,
    output reg game_over
  );
  
  
  
  localparam GENERATE_BUZZER_SEQUENCE_state = 5'd0;
  localparam GENERATE_LED_SEQUENCE_state = 5'd1;
  localparam GENERATE_FINAL_SEQUENCE_state = 5'd2;
  localparam PLAY_SEQUENCE_state = 5'd3;
  localparam IDLE_state = 5'd4;
  localparam BLUE_SHIFT_state = 5'd5;
  localparam GREEN_SHIFT_state = 5'd6;
  localparam RED_SHIFT_state = 5'd7;
  localparam YELLOW_SHIFT_state = 5'd8;
  localparam BUTTON_COUNTER_state = 5'd9;
  localparam GREEN_ADD_state = 5'd10;
  localparam RED_ADD_state = 5'd11;
  localparam YELLOW_ADD_state = 5'd12;
  localparam RESET_LED_SEQUENCE_state = 5'd13;
  localparam RESET_BUZZER_SEQUENCE_state = 5'd14;
  localparam COMPUTE_CORRECT_state = 5'd15;
  localparam CHECK_CORRECT_state = 5'd16;
  localparam PLAYER_SCORE_ADD_state = 5'd17;
  localparam GAME_OVER_state = 5'd18;
  
  reg [4:0] M_state_d, M_state_q = GENERATE_BUZZER_SEQUENCE_state;
  
  always @* begin
    M_state_d = M_state_q;
    
    alufn = 1'h0;
    asel = 1'h0;
    bsel = 1'h0;
    we = 1'h0;
    ra = 1'h0;
    rb = 1'h0;
    rc = 1'h0;
    wdsel = 1'h0;
    play_enable = 1'h0;
    rand_sel = 1'h0;
    rand_next = 1'h0;
    game_over = 1'h0;
    
    case (M_state_q)
      GENERATE_BUZZER_SEQUENCE_state: begin
        we = 1'h1;
        rc = 1'h1;
        wdsel = 1'h0;
        rand_sel = 1'h0;
        rand_next = 1'h1;
        M_state_d = GENERATE_LED_SEQUENCE_state;
      end
      GENERATE_LED_SEQUENCE_state: begin
        we = 1'h1;
        rc = 1'h0;
        wdsel = 1'h0;
        rand_sel = 1'h1;
        rand_next = 1'h1;
        M_state_d = GENERATE_FINAL_SEQUENCE_state;
      end
      GENERATE_FINAL_SEQUENCE_state: begin
        alufn = 6'h16;
        asel = 1'h0;
        bsel = 1'h0;
        we = 1'h1;
        ra = 1'h0;
        rb = 1'h1;
        rc = 2'h2;
        wdsel = 1'h1;
        M_state_d = PLAY_SEQUENCE_state;
      end
      PLAY_SEQUENCE_state: begin
        we = 1'h0;
        play_enable = 1'h1;
        if (counter_sel) begin
          M_state_d = IDLE_state;
        end
      end
      IDLE_state: begin
        if (blue == 1'h1) begin
          M_state_d = BLUE_SHIFT_state;
        end else begin
          if (green == 1'h1) begin
            M_state_d = GREEN_SHIFT_state;
          end else begin
            if (yellow == 1'h1) begin
              M_state_d = YELLOW_SHIFT_state;
            end else begin
              if (red == 1'h1) begin
                M_state_d = RED_SHIFT_state;
              end
            end
          end
        end
        rb = 3'h5;
        if (rb_data == 4'h8) begin
          M_state_d = RESET_LED_SEQUENCE_state;
        end
      end
      BLUE_SHIFT_state: begin
        alufn = 6'h20;
        asel = 1'h0;
        bsel = 2'h2;
        we = 1'h1;
        ra = 2'h3;
        rc = 2'h3;
        wdsel = 2'h1;
        M_state_d = BUTTON_COUNTER_state;
      end
      GREEN_SHIFT_state: begin
        alufn = 6'h20;
        asel = 1'h0;
        bsel = 2'h2;
        we = 1'h1;
        ra = 2'h3;
        rc = 2'h3;
        wdsel = 2'h1;
        M_state_d = GREEN_ADD_state;
      end
      RED_SHIFT_state: begin
        alufn = 6'h20;
        asel = 1'h0;
        bsel = 2'h2;
        we = 1'h1;
        ra = 2'h3;
        rc = 2'h3;
        wdsel = 2'h1;
        M_state_d = RED_ADD_state;
      end
      YELLOW_SHIFT_state: begin
        alufn = 6'h20;
        asel = 1'h0;
        bsel = 2'h2;
        we = 1'h1;
        ra = 2'h3;
        rc = 2'h3;
        wdsel = 2'h1;
        M_state_d = YELLOW_ADD_state;
      end
      GREEN_ADD_state: begin
        alufn = 1'h0;
        asel = 1'h0;
        bsel = 2'h1;
        we = 1'h1;
        ra = 2'h3;
        rc = 2'h3;
        wdsel = 2'h1;
        M_state_d = BUTTON_COUNTER_state;
      end
      RED_ADD_state: begin
        alufn = 1'h0;
        asel = 1'h0;
        bsel = 2'h2;
        we = 1'h1;
        ra = 2'h3;
        rc = 2'h3;
        wdsel = 2'h1;
        M_state_d = BUTTON_COUNTER_state;
      end
      YELLOW_ADD_state: begin
        alufn = 1'h0;
        asel = 1'h0;
        bsel = 2'h3;
        we = 1'h1;
        ra = 2'h3;
        rc = 2'h3;
        wdsel = 2'h1;
        M_state_d = BUTTON_COUNTER_state;
      end
      BUTTON_COUNTER_state: begin
        alufn = 1'h0;
        asel = 1'h0;
        bsel = 1'h1;
        we = 1'h1;
        ra = 3'h5;
        rc = 3'h5;
        wdsel = 2'h1;
        M_state_d = IDLE_state;
      end
      RESET_LED_SEQUENCE_state: begin
        alufn = 1'h1;
        asel = 1'h0;
        bsel = 1'h0;
        we = 1'h1;
        ra = 1'h0;
        rb = 1'h0;
        rc = 1'h0;
        wdsel = 2'h1;
        M_state_d = RESET_BUZZER_SEQUENCE_state;
      end
      RESET_BUZZER_SEQUENCE_state: begin
        alufn = 1'h1;
        asel = 1'h0;
        bsel = 1'h0;
        we = 1'h1;
        ra = 1'h1;
        rb = 1'h1;
        rc = 1'h1;
        wdsel = 2'h1;
        M_state_d = COMPUTE_CORRECT_state;
      end
      COMPUTE_CORRECT_state: begin
        alufn = 8'h33;
        asel = 1'h0;
        bsel = 1'h0;
        we = 1'h1;
        ra = 2'h2;
        rb = 2'h3;
        rc = 3'h6;
        M_state_d = CHECK_CORRECT_state;
      end
      CHECK_CORRECT_state: begin
        rb = 3'h6;
        if (rb_data[0+0-:1]) begin
          M_state_d = PLAYER_SCORE_ADD_state;
        end else begin
          M_state_d = GAME_OVER_state;
        end
      end
      PLAYER_SCORE_ADD_state: begin
        alufn = 1'h0;
        asel = 1'h0;
        bsel = 1'h1;
        ra = 3'h4;
        rc = 3'h4;
        M_state_d = GENERATE_BUZZER_SEQUENCE_state;
      end
      GAME_OVER_state: begin
        game_over = 1'h1;
        if (rst) begin
          M_state_d = GENERATE_BUZZER_SEQUENCE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
